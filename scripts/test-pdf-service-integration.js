// Test the PDF service integration by making a direct HTTP request
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

async function testPDFServiceIntegration() {
  console.log('üß™ Testing PDF Service Integration...\n');
  
  const serviceUrl = 'https://pdf-2-jpg-85b286e7f371.herokuapp.com';
  
  // Test 1: Health check
  console.log('1Ô∏è‚É£ Testing health endpoint...');
  try {
    const healthResponse = await fetch(`${serviceUrl}/health`);
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ Health check passed:', healthData);
    } else {
      console.log('‚ùå Health check failed:', healthResponse.status);
      return;
    }
  } catch (error) {
    console.error('‚ùå Health check error:', error.message);
    return;
  }
  
  // Test 2: PDF conversion
  console.log('\n2Ô∏è‚É£ Testing PDF conversion...');
  
  // Create a minimal test PDF with more visible content
  const testPDF = Buffer.from(`%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
/Font <<
/F1 <<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
>>
>>
>>
endobj

4 0 obj
<<
/Length 200
>>
stream
BT
/F1 24 Tf
50 700 Td
(PDF to Image Test) Tj
0 -50 Td
/F1 16 Tf
(This is a test PDF document) Tj
0 -30 Td
(Generated by Resume Roaster) Tj
0 -30 Td
(Service URL: pdf-2-jpg.herokuapp.com) Tj
0 -50 Td
/F1 12 Tf
(If you can see this text as an image,) Tj
0 -20 Td
(the PDF conversion is working!) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000400 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
650
%%EOF`);

  try {
    console.log(`üìÑ Testing with ${Math.round(testPDF.length / 1024)}KB PDF...`);
    
    // Create FormData
    const formData = new FormData();
    formData.append('file', testPDF, {
      filename: 'test.pdf',
      contentType: 'application/pdf'
    });
    
    // Send request
    const response = await fetch(`${serviceUrl}/pdf-to-images`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });
    
    if (response.ok) {
      const result = await response.json();
      
      if (result.success && result.images && result.images.length > 0) {
        console.log(`‚úÖ SUCCESS! Generated ${result.images.length} images`);
        console.log(`üìä First image size: ${Math.round(result.images[0].length / 1024)}KB base64`);
        console.log(`üìÑ Original filename: ${result.original_filename}`);
        
        // Save images to files so you can view them
        console.log('\nüíæ Saving images to files...');
        
        for (let i = 0; i < result.images.length; i++) {
          try {
            // Convert base64 to buffer
            const imageBuffer = Buffer.from(result.images[i], 'base64');
            
            // Save to file
            const filename = `test-output-page-${i + 1}.jpg`;
            const filepath = path.join(__dirname, filename);
            fs.writeFileSync(filepath, imageBuffer);
            
            console.log(`üì∑ Saved page ${i + 1}: ${filename} (${Math.round(imageBuffer.length / 1024)}KB)`);
            console.log(`   üìÅ Location: ${filepath}`);
          } catch (saveError) {
            console.error(`‚ùå Error saving image ${i + 1}:`, saveError.message);
          }
        }
        
        console.log('\nüéâ Your PDF to image conversion is working!');
        console.log('‚úÖ Next.js app integration should work correctly');
        console.log('\nüëÄ To verify the images:');
        console.log('   1. Open the generated .jpg files in the scripts/ folder');
        console.log('   2. You should see the test PDF content as JPEG images');
        console.log('   3. If the text is readable, the conversion is working perfectly!');
        
        // Test that the image is valid base64
        try {
          Buffer.from(result.images[0], 'base64');
          console.log('‚úÖ Generated image is valid base64 data');
        } catch (e) {
          console.log('‚ö†Ô∏è Generated image may not be valid base64');
        }
        
      } else {
        console.log('‚ö†Ô∏è No images generated:', result);
      }
    } else {
      const errorText = await response.text();
      console.log(`‚ùå HTTP error ${response.status}:`, errorText);
    }
    
  } catch (error) {
    console.error('‚ùå Error testing PDF conversion:', error.message);
  }
  
  console.log('\nüìù Integration Summary:');
  console.log('‚Ä¢ Service URL: https://pdf-2-jpg-85b286e7f371.herokuapp.com');
  console.log('‚Ä¢ Environment variable: PDF_CONVERTER_SERVICE_URL');
  console.log('‚Ä¢ Next.js function: convertPDFToImages() in src/lib/pdf-to-image.ts');
  console.log('‚Ä¢ Generated images saved in: scripts/ folder');
  console.log('\nüöÄ Your resume app should now convert PDFs to images automatically!');
}

testPDFServiceIntegration(); 