
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  emailVerified: 'emailVerified',
  image: 'image',
  hashedPassword: 'hashedPassword',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subscriptionTier: 'subscriptionTier',
  subscriptionId: 'subscriptionId',
  customerId: 'customerId',
  subscriptionEndsAt: 'subscriptionEndsAt',
  monthlyRoasts: 'monthlyRoasts',
  totalRoasts: 'totalRoasts',
  lastRoastReset: 'lastRoastReset'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  filename: 'filename',
  originalSize: 'originalSize',
  fileHash: 'fileHash',
  mimeType: 'mimeType',
  extractedText: 'extractedText',
  wordCount: 'wordCount',
  pageCount: 'pageCount',
  aiProvider: 'aiProvider',
  extractionCost: 'extractionCost',
  summary: 'summary',
  sections: 'sections',
  images: 'images',
  processedAt: 'processedAt',
  processingTime: 'processingTime'
};

exports.Prisma.UsageRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentId: 'documentId',
  action: 'action',
  cost: 'cost',
  creditsUsed: 'creditsUsed',
  createdAt: 'createdAt',
  billingMonth: 'billingMonth'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  billingPeriodStart: 'billingPeriodStart',
  billingPeriodEnd: 'billingPeriodEnd',
  stripeInvoiceId: 'stripeInvoiceId',
  stripePaymentId: 'stripePaymentId',
  itemCount: 'itemCount',
  generatedAt: 'generatedAt',
  paidAt: 'paidAt'
};

exports.Prisma.LLMConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  documentId: 'documentId',
  provider: 'provider',
  model: 'model',
  totalTokensUsed: 'totalTokensUsed',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  status: 'status',
  errorMessage: 'errorMessage'
};

exports.Prisma.LLMMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  inputTokens: 'inputTokens',
  outputTokens: 'outputTokens',
  totalTokens: 'totalTokens',
  cost: 'cost',
  messageIndex: 'messageIndex',
  processingTime: 'processingTime',
  finishReason: 'finishReason',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  createdAt: 'createdAt'
};

exports.Prisma.AnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  documentId: 'documentId',
  jobDescription: 'jobDescription',
  resumeText: 'resumeText',
  analysisData: 'analysisData',
  overallScore: 'overallScore',
  provider: 'provider',
  model: 'model',
  conversationId: 'conversationId',
  totalTokensUsed: 'totalTokensUsed',
  totalCost: 'totalCost',
  processingTime: 'processingTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResumeOptimizationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  analysisId: 'analysisId',
  documentId: 'documentId',
  jobDescription: 'jobDescription',
  resumeText: 'resumeText',
  templateId: 'templateId',
  extractedData: 'extractedData',
  optimizedResume: 'optimizedResume',
  optimizationSuggestions: 'optimizationSuggestions',
  atsScore: 'atsScore',
  keywordsMatched: 'keywordsMatched',
  provider: 'provider',
  model: 'model',
  conversationId: 'conversationId',
  totalTokensUsed: 'totalTokensUsed',
  totalCost: 'totalCost',
  processingTime: 'processingTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SharedAnalysisScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  analysisData: 'analysisData',
  settings: 'settings',
  viewCount: 'viewCount',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  FREE: 'FREE',
  PLUS: 'PLUS',
  PREMIUM: 'PREMIUM'
};

exports.UsageAction = exports.$Enums.UsageAction = {
  EXTRACT_PDF: 'EXTRACT_PDF',
  ROAST_ANALYSIS: 'ROAST_ANALYSIS',
  COVER_LETTER_GENERATION: 'COVER_LETTER_GENERATION',
  RESUME_OPTIMIZATION: 'RESUME_OPTIMIZATION'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.ConversationType = exports.$Enums.ConversationType = {
  RESUME_ANALYSIS: 'RESUME_ANALYSIS',
  JOB_EXTRACTION: 'JOB_EXTRACTION',
  COVER_LETTER_GENERATION: 'COVER_LETTER_GENERATION',
  PDF_EXTRACTION: 'PDF_EXTRACTION',
  RESUME_EXTRACTION: 'RESUME_EXTRACTION',
  GENERAL_CHAT: 'GENERAL_CHAT',
  CHATBOT_SUPPORT: 'CHATBOT_SUPPORT'
};

exports.ConversationStatus = exports.$Enums.ConversationStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  Document: 'Document',
  UsageRecord: 'UsageRecord',
  Invoice: 'Invoice',
  LLMConversation: 'LLMConversation',
  LLMMessage: 'LLMMessage',
  Analysis: 'Analysis',
  ResumeOptimization: 'ResumeOptimization',
  SharedAnalysis: 'SharedAnalysis'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
